---
# Task file per processare un singolo NFS export
# Questo file viene chiamato dal main.yml per ogni export

- name: Check if namespace exists
  command: kubectl get namespace {{ namespace }}
  environment: "{{ _kube_env }}"
  register: namespace_check
  ignore_errors: yes

- name: Create namespace for provisioner
  command: kubectl create namespace {{ namespace }}
  environment: "{{ _kube_env }}"
  when: namespace_check.rc != 0

- name: Ensure temp directory exists
  file:
    path: "{{ nfs_helm_values_temp_path }}"
    state: directory
    mode: '0755'

- name: Build temporary values file for helm
  copy:
    dest: "{{ nfs_helm_values_temp_path }}/{{ release_name }}-values.yaml"
    content: |
      # Generated by Ansible: values for {{ release_name }}
      nfs:
        server: "{{ nfs_server_ip }}"
        path: "{{ export_path }}"
      # Try to set storageClass name and whether it becomes the default
      storageClass:
        name: "{{ storageclass_name }}"
        defaultClass: {{ nfs_make_storageclass_default | string | lower }}
        accessModes:
          - {{ nfs_access_mode }}
        reclaimPolicy: {{ nfs_reclaim_policy }}
      image:
        repository: "{{ nfs_provisioner_image_repository }}"
        tag: "{{ nfs_provisioner_image_tag }}"
        pullPolicy: {{ nfs_provisioner_image_pull_policy }}
      replicaCount: {{ nfs_provisioner_replica_count }}
      resources:
        limits:
          cpu: "{{ nfs_provisioner_cpu_limit }}"
          memory: "{{ nfs_provisioner_memory_limit }}"
        requests:
          cpu: "{{ nfs_provisioner_cpu_request }}"
          memory: "{{ nfs_provisioner_memory_request }}"
    mode: '0644'


- name: Helm upgrade --install provisioner
  command: >-
    helm upgrade --install {{ release_name }}
    {{ nfs_helm_repo_name }}/{{ nfs_helm_chart_name }}
    --namespace {{ namespace }}
    --create-namespace
    -f {{ nfs_helm_values_temp_path }}/{{ release_name }}-values.yaml
    --wait --timeout {{ nfs_helm_timeout }}
    {{ nfs_helm_extra_args }}
  environment: "{{ _kube_env }}"
  register: helm_install
  failed_when: helm_install.rc != 0

- name: Wait for provisioner deployment to be ready
  command: kubectl -n {{ namespace }} rollout status deploy {{ nfs_deployment_name }} --timeout={{ nfs_rollout_timeout }}
  environment: "{{ _kube_env }}"
  register: rollout_check
  failed_when: rollout_check.rc != 0
  ignore_errors: yes

- name: Verify StorageClass creation
  command: kubectl get storageclass {{ storageclass_name }}
  environment: "{{ _kube_env }}"
  register: sc_check
  ignore_errors: yes

- name: Get provisioner pod status
  command: kubectl get pods -n {{ namespace }} -l {{ nfs_pod_selector }}
  environment: "{{ _kube_env }}"
  register: pod_status
  changed_when: false

- name: Print deployment status
  debug:
    msg: |
      =================================================
      NFS Provisioner Deployment Summary
      =================================================
      Release: {{ release_name }}
      Namespace: {{ namespace }}
      Export Path: {{ export_path }}
      NFS Server: {{ nfs_server_ip }}
      StorageClass: {{ storageclass_name }}
      
      Helm Install RC: {{ helm_install.rc }}
      Rollout Status RC: {{ rollout_check.rc }}
      StorageClass Exists: {{ 'Yes' if sc_check.rc == 0 else 'No' }}
      
      Pod Status:
      {{ pod_status.stdout if pod_status.stdout else 'No pods found' }}
      =================================================

- name: Clean up temporary values file
  file:
    path: "{{ nfs_helm_values_temp_path }}/{{ release_name }}-values.yaml"
    state: absent
  when: nfs_cleanup_temp_files
